<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>parallel computing on Anthony's blog</title><link>https://sudrizzz.github.io/categories/parallel-computing/</link><description>Recent content in parallel computing on Anthony's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 11 Jan 2021 15:00:00 +0800</lastBuildDate><atom:link href="https://sudrizzz.github.io/categories/parallel-computing/index.xml" rel="self" type="application/rss+xml"/><item><title>并行计算总结</title><link>https://sudrizzz.github.io/posts/parallel-computing-summary/</link><pubDate>Mon, 11 Jan 2021 15:00:00 +0800</pubDate><guid>https://sudrizzz.github.io/posts/parallel-computing-summary/</guid><description>1. 概念 1.1 摩尔定律（Moore&amp;rsquo;s law） 摩尔定律是由英特尔（Intel）创始人之一戈登·摩尔提出的。其内容为：集成电路上可容纳的晶体管数目，约每隔两年便会增加一倍；经常被引用的“18 个月”，是由英特尔首席执行官大卫·豪斯（David House）提出：预计 18 个月会将芯片的性能提高一倍（即更多的晶体管使其更快），是一种以倍数增长的观测。
通常认为摩尔定律具体的内容：每 18 个月，芯片的性能将提高一倍。
1.2 新摩尔定律（存疑） 由于单个核心性能提升有着严重的瓶颈问题，未来的计算机硬件不会更快，但会更“宽”。
1.3 常见并行模式 进程 + 线程 硬件组织通常是多机+多核，编程环境 MPI+OpenMP
线程 + GPU 线程 硬件组织通常是多核+多 GPU，编程环境 OpenMP+CUDA/OpenCL
进程 + 线程 + GPU 线程 硬件组织通常是多机+多核+多 GPU，编程环境 MPI+OpenMP+CUDA/OpenCL
1.4 CPU 与 GPU 区别 上图中，绿色的是计算单元，橙红色的是存储单元，橙黄色的是控制单元。其中，各个部件详细释义：
ALU：算术逻辑单元（Arithmetic Logic Unit），是一种可对二进制整数执行算术运算或位运算的组合逻辑数字电路； Control：控制单元，负责指挥 CPU 工作，控制其他设备的活动； Cache：用于减少处理器访问内存所需平均时间的部件； DRAM：动态随机存取存储器（Dynamic Random Access Memory），即内存。 简而言之，CPU 擅长于复杂逻辑控制，GPU 擅长于简单重复运算。
2. CUDA 简介及架构 CUDA（Compute Unified Device Architecture）是 NVIDIA 推出的的通用并行计算架构，该架构使 GPU 能够解决大量重复性的计算问题。</description></item><item><title>并行计算课程实践</title><link>https://sudrizzz.github.io/posts/parallel-computing/</link><pubDate>Tue, 24 Nov 2020 10:00:00 +0800</pubDate><guid>https://sudrizzz.github.io/posts/parallel-computing/</guid><description>写在前面 Vim 基本操作 简介 vim 共分为三种模式，分别是命令模式（Command mode），输入模式（Insert mode）和底线命令模式（Last line mode）。 详见 Linux vi/vim | 菜鸟教程。
编辑文件 编辑文本文件可以通过 vim 文件名 实现，如果文件原本不存在，则 Vim 会自动新建该文件。例如新建或编辑名为 test.txt 的文件，可以通过下面的命令实现。
1vim test.txt 进入编辑界面之后，按下 i 键或 Insert 键，即可进入输入模式开始编辑文件。
常用命令 命令 操作说明 Esc 退出编辑模式 :wq 保存文件并退出 Vim :q! 不保存文件并强制退出 Vim（慎用） :set nu 显示行号 i / Insert 切换到输入模式 x 删除当前光标所在处的字符 d 剪切光标所在行 dd 删除光标所在行 yy 复制光标所在行 p 粘贴已复制或已剪切的数据 u 撤销上一步操作 gg 跳转到文件开头 G(shift+g) 跳转到文件末尾 /word 搜索名称为 word 的字符串 ^ 跳转到光标所在行首 $ 跳转到光标所在行尾 代码及数据 本文的代码均存放在 Github，地址 https://github.</description></item></channel></rss>